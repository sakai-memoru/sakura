// app_invokeSearchDocs.jse  
// + sakura macro folder  
//    + app_invokeSearchDocs.jse  
//    + app_invokeSearchDocs  
//      + config  
//        + setting.js  
// 

(function(){

// const 
var CONS_PWSH_EXE = 'powershell -noprofile -Sta -command ';

var CONS_COMMON_LIBPATH = 'G:\\Users\\sakai\\AppData\\Roaming\\sakura';
var CONS_COMMON_LIBS = [
  "./lib/json2.js",
  "./app_invokeSearchDocs/config/setting.js",
]

// load external libraries
var check_env = function(){
  // set env_name for targetting wsh, sakura, node
  var env_name = '';
  if (typeof(WScript) !== "undefined") env_name = 'wsh';
  if (typeof(Editor) !== "undefined") env_name = 'sakura';
  if (typeof(alert) !== "undefined") {env_name = 'browser';}
  else if (typeof(console) !== "undefined") env_name = 'node';
  return env_name;
}
var flag = check_env();
var CONFIG = {};

if(flag == "wsh"||flag == "sakura"){
  var objFS = new ActiveXObject("Scripting.FileSystemObject");
  var lib_path = CONS_COMMON_LIBPATH ? CONS_COMMON_LIBPATH: './';
  // require common module
  with({
    libs : CONS_COMMON_LIBS, 
    get_moduleCode : function(path){
      return objFS.OpenTextFile(path,1).ReadAll();
    }
  }) {
    var len = libs.length;
    for (var i = 0; i < len; i++){
      try {
        var module_path = objFS.BuildPath(lib_path,libs[i]);
        eval(get_moduleCode(module_path));
      } catch (e) {
        //console.log( e.description || e.message || "error" );
        null;
      }
    }
  };
  objFS = null;
}

var debug_mode = typeof CONFIG.DEBUG_MODE !== 'undefined' ? CONFIG.DEBUG_MODE: true ;

// pretend console.log 
var console = typeof console !== 'undefined' ? console : {};
if(console){
  if(debug_mode){
    var typeOf = function(obj) {
      return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
    }
    var stringify_object = function(obj){
      if(typeOf(obj) !== 'object') return obj;
      var ary = [];
      for(var k in obj){
        if(obj.hasOwnProperty(k)){
          if(typeOf(obj) === 'boolean'){
            ary.push('"' + k + '"' + " : " +  stringify_object(obj[k]) + ' ');
          }else if(typeOf(obj) === 'number'){
            ary.push('"' + k + '"' + " : " +  stringify_object(obj[k]) + ' ');
          }else if(typeOf(obj) === 'array'){
            ary.push('"' + k + '"' + " : [" +  stringify_object(obj[k]) + '] ');
          }else if(typeOf(obj) !== 'object'){
            ary.push('"' + k + '"' + " : " + '"' + stringify_object(obj[k]) + '" ');
          }else{
            ary.push('"' + k + '"' + " : " + stringify_object(obj[k]) + ' ');
          }
        }
      }
      var temp = ary.toString();
      temp = temp.substr(0, temp.length -1);
      return "{ " + temp + " }"
    }
    if(flag == "sakura"){
      console.log=function(str){
        var log_str = "[DEBUG] $d$t ($f) > " + str;
        Editor.TraceOut(log_str,1)
      }
      console.info=function(str){
        var log_str = "[INFO] $d$t ($f) > " + str;
        Editor.TraceOut(log_str,1)
      }
      console.dir = function(obj){
        var str = "[DUMP] $d$t ($f) > " + stringify_object(obj);
        Editor.TraceOut(str,1);
      }
    };
    if(flag == "wsh"){
      console.info = function(str){WScript.Echo('[INFO] ' + str)};
      console.log = function(str){WScript.Echo('[DEBUG] ' + str)};
      console.dir = function(obj){ // FIXME stringifyが簡易版
        var str = stringify_object(obj);
        WScript.Echo('[DUMP] ' + str);
      }
    }
  }else{
    if(flag == "wsh")  console.info = function(str){WScript.Echo(str)};
    if(flag == "sakura")  console.info =function(str){Editor.InfoMsg(str)};
    if(flag == "wsh")  console.log = function(str){null;};
    if(flag == "sakura")  console.log = function(str){null;};
    if(flag == "wsh")  console.dir = function(str){null;};
    if(flag == "sakura")  console.dir = function(str){null;};
  }
}

// pretend process.exit
if(typeof(process) === "undefined"){
  if(flag == "wsh")  process={exit : function(e){WScript.Quit(e)}};
  if(debug_mode){
    if(flag == "sakura")  process={exit : function(e){Editor.TraceOut('done')}};
  }else{
    if(flag == "sakura")  process={exit : function(e){null}};
  }
}

// powershell statement ::need to escape for sakura
var herestrings_powershell = function(){
/*
function filesWithSomeCond(){
  [CmdletBinding()]
  param(
    [Parameter(Position=0,Mandatory=$true)]
    [string] $folder,
    [Parameter(Position=1)]
    [string] $json_str = '["*.*"]'
  )
  Echo $str_json
  $json_str | ConvertFrom-Json | set -Name obj 
  $ary = @()
  foreach ($ext in $obj.condition)
  {
    Get-ChildItem $folder $ext -File | foreach{$_.FullName} | set -Name buff
    $ary += $buff
    $buff = $null
  }
  # return
  $ary_sorted = $ary | Sort-Object
  return $ary_sorted
}

search-filesWithSomeCond -folder '{{folder_name}}' -json_str '{{json_str}}' 
*/
}

var herestrings_powershell_invoke = function(){
/*
invoke-item "{{file_path}}"
*/
}

// local function
var merge_map = function(template, map_){
  for (var key_ in map_){
    if(map_.hasOwnProperty(key_)){
      // console.log("L148 : key_ = " + key_);
      // console.log("L149 : map_[key_] = " + map_[key_]);
      var regx = new RegExp('{{' + key_ + '}}',"gim");
      template = template.replace(regx, map_[key_]);
    }
  }
  return template;
}

var get_template = function(herestrings, sep){
  sep = sep || '\r\n';
  var template = herestrings.toString().split(sep).slice(2,-2).join(sep);
  return template;
};

var chopTail = function(str, num){
  var len = str.length;
  return str.substr(0,len - num);
};

var doBatchAndGetStdOut = function(target_){
  //console.log('L169 : target_ = ' + target_);
  var objShell = new ActiveXObject("WScript.Shell");
  var objExec = objShell.Exec(target_);
  while (objShell.Status == 0) {
    Editor.Sleep(100);
  }
  objExec.StdIn.Close();
  var text = objExec.StdOut.ReadAll()
  // console.log('L177 : text = ' + text);
  objExec = null;
  objShell = null;
  if(text){
    text = chopTail(text,2);
  }
  return text;
}

var objToJson = function(obj){
  var ret = '';
  ret = JSON.stringify(obj)
  return ret;
}

var exec_invokeItem = function(file_path){
  var target_ = get_template(herestrings_powershell_invoke);
  var map_ = {
    'file_path' : file_path
  };
  var target_ = merge_map(target_, map_);
  var cmd_statement = CONS_PWSH_EXE + target_;
  var ret = doBatchAndGetStdOut(cmd_statement);
  return ret;
}

var exec_fileSearch = function(folder_name, json_str){
  var target_ = get_template(herestrings_powershell);
  json_str = json_str.replace(/"/g,'"""'); // powershell用Escape'
  var map_ = {
    'folder_name' : folder_name,
    'json_str' : json_str
  };
  var target_ = merge_map(target_, map_);
  var cmd_statement = CONS_PWSH_EXE + target_;
  var ret = doBatchAndGetStdOut(cmd_statement);
  return ret;
}

var get_filePathesWithArray = function(folder_name, cond_obj){
  var json_str = objToJson(cond_obj);
  var result_ = exec_fileSearch(folder_name, json_str);
  var ary_path = result_.split("\r\n");
  return ary_path
}

var get_filenames = function(ary_path){
  var objFS = new ActiveXObject('Scripting.FileSystemObject');
  var ret_ary = [];
  var len = ary_path.length;
  for (var i = 0; i < len ; i++){
    ret_ary.push(objFS.GetFileName(ary_path[i]));
  }
  objFS = null;
  return ret_ary;
}

var generate_menuAndGetOpe = function(ary){
  var menu_ = '';
  var len = ary.length;
  for (var i = 0; i < len; i++){
    menu_ = menu_ + ary[i] + ',';
  }
  menu_ = chopTail(menu_,1);
  var ope = Editor.CreateMenu(1, menu_);
  return ope;
}

var generate_targetObj = function(target_cond, ext_ary){
  var cond_ary = [];
  var len = ext_ary.length;
  for(var i = 0; i < len; i++){
    cond_ary.push('*' + target_cond + '*.' + ext_ary[i] + '*')
  }
  var obj = {};
  obj.condition = cond_ary
  return obj;
}

var get_target = function(expandParam){
  // $F : opened file's full path
  // $f : opened file's name
  // $e : opened file's folder path
  // $b : opened file's extention
  // $C : 選択中の場合、選択テキストの１行目のテキスト（改行コード除く）
  //      選択中でない場合、カーソル位置の単語
  var ret = Editor.ExpandParameter(expandParam);
  return ret;
};

// 
// do process
function doProcess(){
  //console.log('app name :' + (typeof CONFIG.APP_NAME !== 'undefined'? CONFIG.APP_NAME: 'no config!'));
  // get target
  var target_ = get_target('$C');
  var target_ext = CONFIG.TARGET_EXT;
  var target_folder = CONFIG.TARGET_FOLDER;
  // open folder diaglog
  var message_ = 'Select Folder';
  var initialDirectory = target_folder;
  var folder_name = Editor.FolderDialog(message_,initialDirectory);
  // open inputbox
  var windowTitle = 'file search';
  var message2_ = 'Input a keyword for search.'
  var target_cond = Editor.InputBox(message2_, target_, 32);
  
  // execute file search
  var cond_obj = generate_targetObj(target_cond, target_ext);
  var ary_path = get_filePathesWithArray(target_folder, cond_obj);
  var ary = get_filenames(ary_path);
  //console.log("L303 : ary_path = " + ary_path);
  // select macro and execute
  if(ary.length !== 0){
    // create menu
    var ope = generate_menuAndGetOpe(ary);
    if(ope != 0){
      // invoke item 
      exec_invokeItem(ary_path[ope-1]);
    }
  }
}

// -------------- entry point
if(typeof(Editor) !== 'undefined'){
  process.exit(doProcess());
  
} else {
  if(typeof(WScript) !== 'undefined'){
    WScript.Echo('[Warn] This script is for sakura macro. A env is maybe wsh.')
  } else {
    console.log('[Warn] This script is for sakura macro. A env is maybe node.')
  }
}

}())
