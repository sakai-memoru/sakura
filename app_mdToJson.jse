// app_mdToJson.jse  
// + sakura macro folder  
//    + app_mdToJson.jse  
//    + lib  
//      + json2.js  
//      + undersore.js  
//      + StringUtil.jse  
//      + DateUtil.jse  
//      //+ ClipboardGetter.jse
//      + Clipboard3.jse
//    + app_mdToJson  
//      + config
//        + setting.js
// 
(function(){

var CONS_COMMON_LIBPATH = 'G:\\Users\\sakai\\AppData\\Roaming\\sakura';
var CONS_COMMON_LIBS = [
  "./lib/json2.js",
  "./lib/underscore.js",
  "./lib/StringUtil.jse",
  //"./lib/ClipboardGetter.jse",
  "./lib/Clipboard3.jse",
  "./lib/DateUtil.jse",
  "./lib/MD.jse",
  "./app_mdToJson/config/setting.js"
]

// load external libraries
var check_env = function(){
  // set env_name for targetting wsh, sakura, node
  var env_name = '';
  if (typeof(WScript) !== "undefined") env_name = 'wsh';
  if (typeof(Editor) !== "undefined") env_name = 'sakura';
  if (typeof(alert) !== "undefined") {env_name = 'browser';}
  else if (typeof(console) !== "undefined") env_name = 'node';
  return env_name;
}
var flag = check_env();
var CONFIG = {};
var exports = typeof exports !== 'undefined' ? exports : {};

if(flag == "wsh"||flag == "sakura"){
  var objFS = new ActiveXObject("Scripting.FileSystemObject");
  var lib_path = CONS_COMMON_LIBPATH ? CONS_COMMON_LIBPATH: './';
  // require common module
  with({
    libs : CONS_COMMON_LIBS, 
    get_moduleCode : function(path){
      return objFS.OpenTextFile(path,1).ReadAll();
    }
  }) {
    var len = libs.length;
    for (var i = 0; i < len; i++){
      try {
        var module_path = objFS.BuildPath(lib_path,libs[i]);
        //WScript.Echo( module_path );
        eval(get_moduleCode(module_path));
      } catch (e) {
        //WScript.Echo( e.description || e.message || "error" );
        null;
      }
    }
  };
  objFS = null;
}

var debug_mode = typeof CONFIG.DEBUG_MODE !== 'undefined' ? CONFIG.DEBUG_MODE: true ;
var DateUtil = exports.DateUtil;

// pretend console.log 
var console = typeof console !== 'undefined' ? console : {};
if(console){
  if(debug_mode){
    if(flag == "sakura"){
      console.log=function(str){
        var log_str = "[DEBUG] $d$t ($f) > " + str;
        Editor.TraceOut(log_str,1)
      }
      console.info=function(str){
        var log_str = "[INFO] $d$t ($f) > " + str;
        Editor.TraceOut(log_str,1)
      }
      console.dir = function(obj){
        var str = "[DUMP] $d$t ($f) > " + JSON.stringify(obj);
        Editor.TraceOut(str,1);
      }
    };
    if(flag == "wsh"){
      console.info = function(str){WScript.Echo('[INFO] ' + DateUtil.get_todayString()  + ' (' + DateUtil.get_todayDayString() + ') ' + DateUtil.get_nowTimeString() + ' > ' + str)};
      console.log = function(str){WScript.Echo('[DEBUG] ' + DateUtil.get_todayString()  + ' (' + DateUtil.get_todayDayString() + ') ' + DateUtil.get_nowTimeString() + ' > ' + str)};
      console.dir = function(obj){ 
        var str = JSON.stringify(obj);
        WScript.Echo('[DUMP] ' + str);
      }
    }
  }else{
    if(flag == "wsh")  console.info = function(str){WScript.Echo(str)};
    if(flag == "sakura")  console.info =function(str){Editor.InfoMsg(str)};
    if(flag == "wsh")  console.log = function(str){null;};
    if(flag == "sakura")  console.log = function(str){null;};
    if(flag == "wsh")  console.dir = function(str){null;};
    if(flag == "sakura")  console.dir = function(str){null;};
  }
}
// pretend process.exit
if(typeof(process) === "undefined"){
  if(flag == "wsh")  process={exit : function(e){WScript.Quit(e)}};
  if(debug_mode){
    if(flag == "sakura")  process={exit : function(e){Editor.TraceOut('done')}};
  }else{
    if(flag == "sakura")  process={exit : function(e){null}};
  }
}

// local method for Editor
var get_target = function (expandParam){
  // $F : opened file's full path
  // $f : opened file's name
  // $e : opened file's folder path
  // $b : opened file's extention
  // $C : 選択中の場合、選択テキストの１行目のテキスト（改行コード除く）
  //      選択中でない場合、カーソル位置の単語
  // 引数無し : 選択されている場合、選択された文字列。
  //       選択されていない場合、Clipboardにある文字列
  // $Z : 独自expandPrameter : 全テキスト
  // $L : 独自expandPrameter : 行選択として取得。選択がなければClipboardより取得
  // $l : 独自expandPrameter : 行選択として取得。選択がなければ取得しない
  var ret ='';
  if(typeof(expandParam) === 'undefined'){
    if(Editor.IsTextSelected){
      ret = Editor.GetSelectedString(0);
    }else{
      ret = Editor.GetClipboard(0);
    }
  } else {
    if(expandParam === '$Z'){
      Editor.SelectAll();
      ret = Editor.GetSelectedString(0);
      Editor.IsTextSelectingLock(0);
      Editor.ExpandParameter(expandParam)
    } else if (expandParam === '$L'){
      if(Editor.IsTextSelected){
        // line select
        var lineNum = get_seletedLineNumber();
        ret = get_lines(lineNum.start_line_num, lineNum.end_line_num);
        select_lines(lineNum.start_line_num, lineNum.end_line_num);
      }else{
        ret = Editor.GetClipboard(0);
      }
    } else if (expandParam === '$l'){
      if(Editor.IsTextSelected){
        // line select
        var lineNum = get_seletedLineNumber();
        ret = get_lines(lineNum.start_line_num, lineNum.end_line_num);
        select_lines(lineNum.start_line_num, lineNum.end_line_num);
      }
    } else {
      ret = Editor.ExpandParameter(expandParam)
    }
  }
  return ret;
};

var get_seletedLineNumber = function(){
  var start_line_num = Editor.GetSelectLineFrom();
  var end_line_num = Editor.GetSelectLineTo(); // FIXME
  return {
    "start_line_num" : start_line_num,
    "end_line_num" : end_line_num
  }
}

var get_lines = function(start_line_num, end_line_num){
  if(typeof end_line_num === 'undefined'){
    end_line_num = Editor.GetLineCount(0);
  }
  if(typeof start_line_num === 'undefined'){
    start_line_num = 1;
  }
  Editor.Jump(start_line_num);
  Editor.GoLineTop(1);
  Editor.BeginSelect();
  Editor.Jump(end_line_num);
  Editor.GoLineEnd(0);
  var lines = Editor.GetSelectedString(0);
  //console.log('L218 :' + start_line_num);
  //console.log('L219 :' + end_line_num);
  Editor.CancelMode();
  return lines;
}

var select_lines = function(start_line_num, end_line_num){
  Editor.CancelMode();
  Editor.TextWrapMethod(0);
  Editor.Jump(start_line_num);
  Editor.GoLineTop(1);
  Editor.BeginSelect(0);
  Editor.Jump(end_line_num);
  Editor.GoLineEnd();
  // Editor.TextWrapMethod(2);
}

var get_template = function(herestrings, sep){
  sep = sep || '\r\n';
  var template = herestrings.toString().split(sep).slice(2,-2).join(sep);
  return template;
}

var show_menu = function(isDisplay){
  if(typeof(isDisplay) === 'undefined') isDisplay = true;
  var ope = 0;
  var menu_statement = function(){
/**
1. tab -> md (&m),
*/
  }
  if(isDisplay){
    var menu_ = get_template(menu_statement)
    ope = Editor.CreateMenu( 1, menu_);
    // console.log(menu_statement);
    // console.log(ope);
    return ope;
  } else {
    return ope;
  }
}

var output_display = function(str){
  if(Editor.isTextSelected){
    //Editor.InsText(str);
    Editor.TraceOut(str);
  } else {
    // Editor.SetClipboard(0,str)
    Editor.TraceOut(str);
  }
}

// local method for WSH
function get_sakuraMacroPath(){
  var target_macro_name = CONFIG.MACRO_FILE;
  var target_folder_name = CONFIG.MACRO_FOLDER;
  var objFS = new ActiveXObject("Scripting.FileSystemObject");
  var objShell = new ActiveXObject("WScript.Shell");
  var appdata_folder = objShell.SpecialFolders("AppData");
  var target_folder_path = objFS.BuildPath(appdata_folder, target_folder_name);
  var target_macro_path = objFS.BuildPath(target_folder_path, target_macro_name);
  objShell = null;
  objFS = null;
  return target_macro_path
}

function open_sakura(target_){
  var objShell = new ActiveXObject("WScript.Shell");
  var cmd_statement = "sakura.exe -M=" + target_
  //var cmd_statement = "sakura.exe -DEBUGMODE -M=" + target_
  //WScript.Echo(cmd_statement);
  //"sakura.exe -M=G:\Users\sakai\AppData\Roaming\sakura\paste_clipboard.jse"
  objShell.Run(cmd_statement, 1);
  var objShell = null;
}

var output_newFile = function(str){
  CLIP.set_clipboard(str);
  var target_macro = get_sakuraMacroPath();
  open_sakura(target_macro);
}

// local method for both wsh and Editor
var form_target = function(str, line_code){
  /* unifiy linecode and rtrim */
  if(typeof line_code === 'undefined') line_code = '\r\n';
  str = StringUtil.unifyLineCode(str, line_code)
  var lines = str.split(line_code);
  return _.map(lines, function(elm, idx){
    return StringUtil.rtrim(elm);
  })
}

var check_firstLine = function(line){
  /** To check Format Sheet ID */
  var ret = false;
  var check_ary = line.split(':');
  if(check_ary.length == 2){
    check_ary = _.map(check_ary, function(elm){
      return StringUtil.trim(elm);
    })
    if(check_line[0] === CONS_FORMAT_FNAME) {
      if(check_line[1] === CONS_FORMAT_SHEETID) {
        ret = true;
      }
    }
  }
  return ret
}

var check_lineCategory = function(line){
  /** categorize line context */
  var ret = '';
  var regx_header = new RegExp('\\s*#{1,4}');
  var regx_table  = new RegExp('\\s*\\|');
  var regx_spaces  = new RegExp('^\\s*$','m');
  var regx_numeric  = new RegExp('\\d+');
  //
  if (regx_spaces.test(line)){
    ret = 'spaces';
  } else if(regx_header.test(line)){
    ret = 'h1234';
  } else if(regx_table.test(line)){
    if(!StringUtil.contains(line, '-')){
      var check_col = line.split('|');
      if(check_col.length >= 2){
        var first_colStr = StringUtil.trim(check_col[CONFIG.TABLE_HEAD_POS]);
        if(first_colStr === CONFIG.TABLE_HEAD){
          ret = 'th';
        } else if(regx_numeric.test(first_colStr)){
          ret = 'tr';
        } else {
          ret = 'tr-space'; // no column is space.
        }
      } else {
        ret = 'tr-column-num-error'; // not target column number
      }
    } else {
      ret = 'thr'; // table border inside a table
    }
  } else {
    ret = 'pre';  // such as <pre> or <p> or <li>
  }
  //console.log('L301 : ' + ret)
  return ret
}

var convertto_headerObj = function(line,idx){
  /** analyze header's statement */
  var ret = [];
  var regx = new RegExp('#{1,4}\\s+');
  if(!StringUtil.contains(line, ':')){
    line = line + ' : '
  }
  var hlevel = line.match(/#{1,4}\s+/);
  var ary = line.split(':');
  ary = _.map(ary,function(elm){
    elm = elm.replace(regx,'');
    return StringUtil.trim(elm);
  })
  // array size is equal 2 and array is of key and value 
  var level = StringUtil.trim(hlevel[0]).length
  if(ary.length == 2){
    ret = {
      line_no : idx,
      level : '' + level,
      header_ary : ary
    }
  }
  return ret
}

var convertto_colums = function(line){
  /** convert a table row to an arrray of columns */
  var ret = [];
  //line = StringUtil.chopDouble(StringUtil.trim(line),1);
  var ary = line.split('|');
  ary = _.map(ary,function(elm){
    return StringUtil.trim(elm);
  })
  if(ary.length >= CONFIG.TABLE_COLSIZE){
    // check Table COLSIZE by config setting
    ret = _.initial(_.rest(ary));
  }
  return ret
}

var convertfrom_headersObj = function(headers){
  /** convert headers composed into an arrray of 
   *  header line no and composed header 
   */
  var len = headers.length;
  var pre_level = 0;
  var ary = [];
  var h1234_buff = [];
  var obj = {};
  for(var i = 0; i < len; i++){
    if(pre_level < headers[i].level){
      h1234_buff.push(headers[i].header_ary[0]);
    } else if(pre_level >= headers[i].level) {
      h1234_buff = _.first(h1234_buff, headers[i].level-1);
      h1234_buff.push(headers[i].header_ary[0]);
    }
    obj = {
      line_no : headers[i].line_no,
      composedHeader : h1234_buff.join('.')
    }
    ary.push(obj);
    pre_level = headers[i].level;
  }
  var ret_ary = _.map(ary, function(elm,idx){
    var buf = {};
    buf[elm['line_no']] = elm['composedHeader'];
    return buf
  })
  return ret_ary
}

var extend_arrayOfObj = function(ary){
  var ret = {};
  var len = ary.length;
  for(var i = 0; i < len; i++){
    var key_ = _.keys(ary[i])[0]
    var val_ = ary[i][key_]
    ret[key_] = val_
  }
  return ret
}

var convertto_object = function(lines, i_start,line_code){
  var ret_obj = {};
  var len = lines.length;
  var target_line_no = 0;
  var target_line_no_headOfRows = 0;
  var col_head = [];
  var col_row = [];
  var buff_h1234 = [];
  var buff_obj = {};
  var buff_paragraph = [];
  var buff_rows = [];
  var row_obj = {}; // for row
  var line_category = '';
  for(var i = i_start; i < len; i++){
    line_category = check_lineCategory(lines[i])
    //console.log('L359 : line_category = ' + line_category);
    //console.log('L360 : line = ' + lines[i]);
    // 
    // process for each category
    if(line_category === 'h1234'){
      if(buff_paragraph.length !== 0){
        buff_obj[target_line_no + '.contents'] = buff_paragraph.join(line_code);
        buff_paragraph.length = 0;
      }
      var header_obj = convertto_headerObj(lines[i],i);
      // console.log('L462 : ');
      // console.dir(header_obj);
      target_line_no = header_obj.line_no;
      buff_h1234.push(header_obj);
      buff_obj[header_obj.line_no] = header_obj.header_ary[1];
    }
    if(line_category === 'th'){
      if(buff_paragraph.length !== 0){
        buff_obj[target_line_no + '.contents'] = buff_paragraph.join(line_code);
        buff_paragraph.length = 0;
      }
      col_head = convertto_colums(lines[i]);
      target_line_no_headOfRows = target_line_no;
    }
    if(line_category === 'tr'){
      col_row = convertto_colums(lines[i]);
      if(col_head.length == col_row.length){
        row_obj = _.object(col_head, col_row);
        buff_rows.push(row_obj);
      }
    }
    if(line_category == 'pre'){
      buff_paragraph.push(lines[i]);
    }
  }
  if(buff_paragraph.length !== 0){
    buff_obj[target_line_no + '.contents'] = buff_paragraph.join(line_code);
  }
  if(buff_rows.length !== 0){
    buff_obj[target_line_no_headOfRows + '.rows'] = buff_rows;
  }
  ret_obj = {
    'headers_ary' : buff_h1234,
    'converted_obj' : buff_obj
  }
  return ret_obj
}

var generate_dictOfHeader = function(ary){
  var ary_headersOfLineNoAndComposedName = convertfrom_headersObj(ary);
  //console.log('L497 : ary' + ary_headersOfLineNoAndComposedName);
  var dict = extend_arrayOfObj(ary_headersOfLineNoAndComposedName);
  _.defaults(dict, {'0': 'first_p'});
  return dict
}

var reorganize_data = function(obj,dict){
  var ret = {}
  for(var key_ in obj){
    if(obj.hasOwnProperty(key_)){
      var buff = key_.split('.');
      var line_no = buff[0];
      var composedHead = dict[line_no];
      if(buff.length == 2){
        composedHead = composedHead + '.' + buff[1];
      }
    }
    ret[composedHead] = obj[key_]
  }
  return ret
}

var get_object = function(lines, line_code, isCheckedForm){
  if(typeof isCheckedForm !== 'undefined') isCheckedForm = false;
  var ret_obj = {};
  var dict_headerKeys = {};
  var line_first = lines[0];
  //
  if(isCheckedForm){
    if(!check_firstLine(line_first)){
      return ret_obj
    }
  }
  // 
  var converted = {};
  var ary_h1234 = [];
  var obj_converted = {};
  var line_category = '';
  var i_start = 0;
  //console.log('L337 : isTargetFormat = ' + isTargetFormat);
  if(isCheckedForm) {
    i_start = 1;
  }
  converted = convertto_object(lines, i_start, line_code);
  obj_converted = converted['converted_obj'];
  ary_h1234 = converted['headers_ary'];
  // 
  // organize return object
  var dict_headerKeys = generate_dictOfHeader(ary_h1234);
  ret_obj = reorganize_data(obj_converted,dict_headerKeys);
  //console.log('L527');
  //console.dir(ret_obj);
  return ret_obj
}

// do process -------------------------------------------------
var doProcess = function(menuSelected){
  //console.log('------------------------- start //');
  //console.log('APP : ' + CONFIG.APP_NAME);
  Editor.TextWrapMethod(0);
  var dic_lineCode = ['\r\n', '\r', '\n']
  var line_code = dic_lineCode[Editor.GetLineCode()];
  var tab_size = Editor.ChangeTabWidth(0); // get tab size setting
  var target_ = get_target('$L');
  var formatted = '';
  // pre-process
  var ope = 0;
  if(!menuSelected){
    ope = show_menu();
  } else {
    ope = menuSelected;
  }
  // main process for selected menu's one
  if(ope == 1){
    //1. tab -> md (&m),
    lines_formatted = form_target(target_, line_code);
    var line_first = lines_formatted[0];
    
    var obj = get_object(lines_formatted, line_code);
    formatted = JSON.stringify(obj);
  }
  // post-process 
  if(ope !== 0){
    output_display(formatted);
  }
  Editor.TextWrapMethod(2);
  // for debug
  if(debug_mode){
    console.log('ope = ' + ope);
    console.log('target_  = ' + target_);
    console.log('formatted = ' + formatted);
  }
}

// do debug ---------------------------------------------------
var doDebugMain = function(){
  console.log('------------------------- start //');
  console.log('APP : ' + CONFIG.APP_NAME);
  var isCheckedForm = typeof CONFIG.IS_CHECKED_FORM !== 'undefined' ? CONFIG.IS_CHECKED_FORM: false;
  var target_ = CLIP.get_clipboard();
  //console.log('target_ = ' + target_);
  var lines_formatted = [];
  var line_code = '\r\n';
  lines_formatted = form_target(target_, line_code);
  var obj = get_object(lines_formatted, line_code, isCheckedForm);
  if(obj){
    output_newFile(JSON.stringify(obj));
  }
}


// --------------------------------------------------- entry point
if(typeof(Editor) !== 'undefined'){
  var _ = exports._;
  var StringUtil = exports.StringUtil;
  var CLIP = exports.CLIP;
  //var CLIP = exports.CLIPGETTER;
  //console.dir(exports);
  //console.dir(typeof _);
  doProcess(1);
} else {
  if(typeof(WScript) !== 'undefined'){
    var _ = exports._;
    var StringUtil = exports.StringUtil;
    var CLIP = exports.CLIP;
    // var CLIPGETTER = exports.CLIPGETTER;
    // console.dir(exports);
    // console.dir(typeof _);
    // console.dir(typeof StringUtil);
    doDebugMain();
    //WScript.Echo('[Warn] This script is for sakura macro. A env is maybe wsh.')
  } else {
    console.log('[Warn] This script is for sakura macro. A env is maybe node.')
  }
}

}())
