// app_beautify.jse
// + sakura macro folder
//    + app_beautify.jse  
//    + lib  
//      + js-beautify.js  
//    + app_beautify  
//      + config  
//        + setting.js  
// 
(function(){

// const
var CONS_COMMON_LIBPATH = 'G:\\Users\\sakai\\AppData\\Roaming\\sakura';
var CONS_COMMON_LIBS = [
  //"./lib/es5-shim.js",
  //"./lib/json2.js",
  //"./lib/DateUtil.jse",
  //"./lib/StringUtil.jse",
  "./lib//js-beautify.js",
  //"./lib/Clipboard3.jse",
  "./lib/ClipboardGetter.jse",
  //"./lib/Template.jse",
  //"./lib/Dialog.jse",
  "./app_beautify/config/setting.js",
]

var CONS_LOCAL_LIBPATH = '';
var CONS_LOCAL_LIBS = [
    //"./config/setting.js",
    //"../lib/beautify-css.js",
    //"../lib/beautify-html.js",
]

// commonalized for js   /////////////////////////////////////////////
// load external libraries
var check_env = function() {
  // set env_name for targetting wsh, sakura, node
  var env_name = '';
  if (typeof(WScript) !== "undefined") env_name = 'wsh';
  if (typeof(Editor) !== "undefined") env_name = 'sakura';
  if (typeof(alert) !== "undefined") {
      env_name = 'browser';
  } else if (typeof(console) !== "undefined") env_name = 'node';
  return env_name;
}
var flag = check_env();
var CONFIG = {};
var exports = {};

if(flag == "wsh"||flag == "sakura"){
  var objFS = new ActiveXObject("Scripting.FileSystemObject");
  var lib_path = CONS_COMMON_LIBPATH ? CONS_COMMON_LIBPATH: './';
  var llib_path = CONS_LOCAL_LIBPATH ? CONS_LOCAL_LIBPATH: './';
  // require common module
  with({
    libs : CONS_COMMON_LIBS, 
    llibs : CONS_LOCAL_LIBS,
    get_moduleCode : function(path){
      return objFS.OpenTextFile(path,1).ReadAll();
    }
  }) {
    var len = libs.length;
    for (var i = 0; i < len; i++){
      try {
        var module_path = objFS.BuildPath(lib_path,libs[i]);
        eval(get_moduleCode(module_path));
      } catch (e) {
        //console.log( e.description || e.message || "error" );
        null;
      }
    }
    var llen = llibs.length;
    for (var i = 0; i < llen; i++){
      try {
        var module_path = objFS.BuildPath(llib_path,llibs[i]);
        eval(get_moduleCode(module_path));
      } catch (e) {
        //console.log( e.description || e.message || "error" );
        null;
      }
    }
  };
  objFS = null;
}

var debug_mode = CONFIG.DEBUG_MODE;

// pretend console.log 
var console = console || {};
if(console){
  if(debug_mode){
    if(flag == "sakura"){
      console.log=function(str){
        var log_str = "[DEBUG] $d$t ($f) > " + str;
        Editor.TraceOut(log_str,1)
      }
      console.info=function(str){
        var log_str = "[INFO] $d$t ($f) > " + str;
        Editor.TraceOut(log_str,1)
      }
    };
    if(flag == "wsh"){
      console.info = function(str){WScript.Echo('[INFO] ' + str)};
      console.log = function(str){WScript.Echo('[DEBUG] ' + str)};
    }
  }else{
    if(flag == "wsh")  console.info = function(str){WScript.Echo(str)};
    if(flag == "sakura")  console.info =function(str){Editor.InfoMsg(str)};
    if(flag == "wsh")  console.log = function(str){null;};
    if(flag == "sakura")  console.log = function(str){null;};
  }
}
// pretend process.exit
if(typeof(process) === "undefined"){
  if(flag == "wsh")  process={exit : function(e){WScript.Quit(e)}};
  if(debug_mode){
    if(flag == "sakura")  process={exit : function(e){Editor.TraceOut('done')}};
  }else{
    if(flag == "sakura")  process={exit : function(e){'done'}};
  }
}

// local functions
// 
var get_target = function(expandParam){
  // $F : opened file's full path
  // $f : opened file's name
  // $e : opened file's folder path
  // $b : opened file's extention
  // $C : 選択中の場合、選択テキストの１行目のテキスト（改行コード除く）
  //      選択中でない場合、カーソル位置の単語
  // 引数無し : 選択されている場合、選択された文字列。選択されていない場合、Clipboardにある文字列
  // $Z : 独自expandPrameter : 全テキスト
  var ret ='';
  if(typeof(expandParam) === 'undefined'){
    if(Editor.IsTextSelected){
      ret = Editor.GetSelectedString(0);
    }else{
      ret = Editor.GetClipboard(0);
    }
  } else {
    if(expandParam === '$Z'){
      Editor.SelectAll();
      ret = Editor.GetSelectedString(0);
      Editor.IsTextSelectingLock(0);
      Editor.ExpandParameter(expandParam)
    } else {
      ret = Editor.ExpandParameter(expandParam)
    }
  }
  return ret;
};

var get_template = function(herestrings, sep){
  sep = sep || '\r\n';
  var template = herestrings.toString().split(sep).slice(2,-2).join(sep);
  return template;
};

var get_sakuraMacroPath = function(target_macro_name, target_folder_name){
  var objFS = new ActiveXObject("Scripting.FileSystemObject");
  var objShell = new ActiveXObject("WScript.Shell");
  var appdata_folder = objShell.SpecialFolders("AppData");
  var target_folder_path = objFS.BuildPath(appdata_folder, target_folder_name);
  var target_macro_path = objFS.BuildPath(target_folder_path, target_macro_name);
  objShell = null;
  objFS = null;
  return target_macro_path
}

var show_menu = function(){
  var menu_statement = function(){
/**
1. js-beautify(&j),
2. SQLFix(&q),
3. js-beautify(json)(&s),-,
4. XMLFix(XML)(&x),
*/
  }
  var menu_ = get_template(menu_statement)
  var ope = Editor.CreateMenu( 1, menu_);
  // console.log(menu_statement);
  // console.log(ope);
  return ope;
};

var operate_screen = function(str){
  if(debug_mode){
    Editor.TraceOut(str);
  } else {
    Editor.InsText(str);
  }
};

var doBatch = function(cmd_statement, cmd_path){
  //console.log(cmd_statement);
  //console.log(cmd_path);
  var objFS = new ActiveXObject("Scripting.FileSystemObject");
  var objShell = new ActiveXObject("WScript.Shell");
  var bak = objShell.CurrentDirectory;
  if(typeof(cmd_path) !== "undefined") {
    objShell.CurrentDirectory = objFS.GetParentFolderName(cmd_path); 
  }
  objShell.Run(cmd_statement, 1);
  while (objShell.Status == 0) {
    WScript.Sleep(100);
  }
  objShell.CurrentDirectory = bak;
  objShell = null;
  objFS = null;
};

var open_anotherSakuraWithClipboard = function(str){
  if(debug_mode){
    Editor.TraceOut(str);
  } else {
    Editor.ClipboardEmpty();
    Editor.SetClipboard(0,str);
    var cmd_sakura_macro_path = get_sakuraMacroPath(CONFIG.MACRO_FILE_PASTE_CLIPBOARD, 'sakura');
    var cmd_statement_EXE_SAKURA = CONFIG.EXE_SAKURA_MACRO + cmd_sakura_macro_path;
    doBatch(cmd_statement_EXE_SAKURA);
  }
}

// ------------------------------------------------ do process 
var doProcess = function(){
  console.log('------------------------- start');
  console.log('APP : ' + CONFIG.APP_NAME);
  var js_beautify = exports.js_beautify;
  //var html_beautify = exports.html_beautify;
  //var css_beautify = exports.css_beautify;
  var CLIPGET = exports.CLIPGETTER;
  // console.info(js_beautify);
  var target_ = get_target();
  var formatted = target_;
  
  // process for menu case
  // show menu
  var ope = show_menu();
  
  // call cased function
  if(ope == 1){
    // 1. js-beautify(&j),
    var beautify_opt = CONFIG.BEAUTIFY_OPT;
    formatted = js_beautify(formatted,beautify_opt);
    formatted = formatted.replace(/\r?\n/g, "\n").replace(/\n/g, "\r\n")
  }
  if(ope == 2){
    // 2. SQLFix(&q),
    if(Editor.IsTextSelected){
      //Editor.ClipboardEmpty();
      Editor.InfoMsg("Often this tool don't work selected-string correctly, please paste it from clipboard.");
      Editor.SetClipboard(0,target_);
      var cmd_statement_EXE_SQLFIX = CONFIG.EXE_SQLFIX;
      doBatch(cmd_statement_EXE_SQLFIX,cmd_statement_EXE_SQLFIX);
      //formatted = CLIPGET.get_clipboard();
      formatted = Editor.GetClipboard(0);
    } else {
      var cmd_statement_EXE_SQLFIX = CONFIG.EXE_SQLFIX;
      doBatch(cmd_statement_EXE_SQLFIX,cmd_statement_EXE_SQLFIX);
      formatted = CLIPGET.get_clipboard();
    }
  }
  if(ope == 3){
    // 3. js-beautify(json)(&s),
    var beautify_opt = CONFIG.BEAUTIFY_OPT;
    formatted = js_beautify(formatted,beautify_opt);
    formatted = formatted.replace(/\r?\n/g, "\n").replace(/\n/g, "\r\n")
  }
  if(ope == 4){
    // 4. XMLFix(XML)(&x),
    if(Editor.IsTextSelected){
      Editor.InfoMsg("Often this tool don't work selected-string correctly, please copy it into clipboard.");
      var cmd_statement_EXE_XMLFIX = CONFIG.EXE_XMLFIX;
      doBatch(cmd_statement_EXE_XMLFIX,cmd_statement_EXE_XMLFIX);
      formatted = CLIPGET.get_clipboard();
    } else {
      var cmd_statement_EXE_XMLFIX = CONFIG.EXE_XMLFIX;
      doBatch(cmd_statement_EXE_XMLFIX,cmd_statement_EXE_XMLFIX);
      formatted = CLIPGET.get_clipboard();
    }
  }
  
  // 以下、試験未。requireを使っていないので動くかも。
  //if(ope == 5){
  //  // 5. beautify-css(&c),
  //  var beautify_opt = CONFIG.BEAUTIFY_OPT;
  //  formatted = css_beautify(formatted,beautify_opt);
  //  formatted = formatted.replace(/\r?\n/g, "\n").replace(/\n/g, "\r\n")
  //}
  //
  // 以下、動かない。jsの中に、requireが入っている
  //if(ope == 6){
  //  // 6. beautify-html(&h),
  //  var beautify_opt = CONFIG.BEAUTIFY_OPT;
  //  formatted = html_beautify(formatted,beautify_opt);
  //  formatted = formatted.replace(/\r?\n/g, "\n").replace(/\n/g, "\r\n")
  //}
  
  // for debug
  if(debug_mode){
    console.log('ope = ' + ope);
    console.log('target_ = ' + target_);
    console.log('formatted = ' + formatted);
  }
  // output
  if(ope !== 0){
    if(Editor.IsTextSelected){
      operate_screen(formatted);
    }else{
      open_anotherSakuraWithClipboard(formatted);
    }
  }
};

// ------------------------------------------------ entry point
// 
if(typeof(Editor) !== 'undefined'){
  process.exit(doProcess());
  
} else {
  if(typeof(WScript) !== 'undefined'){
    WScript.Echo('[Warn] Opps! Sorry. This app is for Sakura Ediotr.');
  } else {
    console.log('[Warn] Opps! Sorry. This app is for Sakura Ediotr.');
  }
}

}())
