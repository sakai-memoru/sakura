(function(){

// const
var CONS_LIBPATH = '';
var LIBS = [
  "./lib/es5-shim.js",
  "./lib/json2.js",
  "./lib/clipboard2.jse",
  "./config/setting.js",
]

// commonalized for js   /////////////////////////////////////////////
function check_env(){
  // set env_name for targetting wsh, sakura, node
  var env_name = '';
  if (typeof(WScript) !== "undefined") env_name = 'wsh';
  if (typeof(Editor) !== "undefined") env_name = 'sakura';
  if (typeof(alert) !== "undefined") {env_name = 'browser';}
  else if (typeof(console) !== "undefined") env_name = 'node';
  return env_name;
}
var flag = check_env();

// load external libraries
if(flag == "wsh"||flag == "sakura"){
  var objFS = new ActiveXObject("Scripting.FileSystemObject");
  var lib_path = CONS_LIBPATH ? CONS_LIBPATH: './';
  // require common moduje
  with({
    libs : LIBS, 
    get_moduleCode : function(path){
      return objFS.OpenTextFile(path,1).ReadAll();
    }
  }) {
    for (i in libs){
      try {
        var module_path = objFS.BuildPath(lib_path,libs[i]);
        eval(get_moduleCode(module_path));
      } catch (e) {
        //console.log( e.description || e.message || "error" );
        null;
      }
    }
  };
  objFS = null;
}

var debug_mode = CONFIG.DEBUG_MODE;

// pretend console.log 
if(typeof(console) === "undefined"){
  if(flag == "wsh")  console={log : function(str){WScript.Echo(str)}};
  if(debug_mode){
    if(flag == "sakura")  console={log : function(str){Editor.TraceOut(str)}};
  }else{
    if(flag == "sakura")  console={log : function(str){null}};
  }
}

// pretend process.exit
if(typeof(process) === "undefined"){
  if(flag == "wsh")  process={exit : function(e){WScript.Quit(e)}};
  if(debug_mode){
    if(flag == "sakura")  process={exit : function(e){Editor.TraceOut('done')}};
  }else{
    if(flag == "sakura")  process={exit : function(e){'done'}};
  }
}

// if would use clipboard, pretend clipboard
// get clipboardData
function get_clipboard(){
  var ret;
  if(flag == "wsh"){
    var CLIP = new Clipboard();
    ret = CLIP.getText();
    // don't forgett to releace CLIP Object
    CLIP.release();
  }
  if(flag == "sakura"){
    ret = Editor.getClipboard();
  }
  return ret;
}

// set clipboard
function set_clipboard(str){
  if(flag == "wsh"){
    var CLIP = new Clipboard();
    CLIP.setText(str);
    // don't forgett to releace CLIP Object
    CLIP.release();
  }
  if(flag == "sakura"){
    Editor.setClipboard(0,str);
  }
}

//////////////////////////////////////////////////////////////////////////////
// below execution code
function doProcess() {
  console.log('------------------ start');
  console.log('DEBUG_MODE = ' + debug_mode);
  
  // Array's cool methods
  var num = [1, 2, 3, 4, 5, 6].filter(function(v){
    return (v % 2 === 0);
  }).map(function(v) {
    return v * v;
  }).reduce(function(prev, current, i , ar) {
    return prev + current;
  });
  
  console.log('L114 : num = ' + num); // =>56
  console.log('L115 : App name = ' + CONFIG.APP_NAME);  // => base.js
  
  cliptext = get_clipboard();
  console.log('L118 : Clipboard = ' + cliptext);  // => 
  set_clipboard('test for setting clipboard function');
  
  // Generate JSON string
  var str = JSON.stringify({'Hello': 123});
  console.log('L123 : stringfied = ' + str); // => '{"Hello":123}'
  console.log('L124 : trimed = "' + '  sample  '.trim() + '"'); // =>"sample"
}

function doHello(){
  null;
  console.log('Hello');
}

// ------------------------------------------------ entry point
process.exit(doProcess());
//process.exit(doHello());

}())
