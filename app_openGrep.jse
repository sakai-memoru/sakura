// app_openGrep.jse for Ediotr
// + sakura macro folder
//    + app_openGrep.jse  
//    + lib  
//      + StringUtil.jse  
//      + Dialog.jse  
//    + app_openGrep  
//      + config  
//        + setting.js  
// 
(function(){

// const
var CONS_COMMON_LIBPATH = 'G:\\Users\\sakai\\AppData\\Roaming\\sakura';
var CONS_COMMON_LIBS = [
  //"./lib/es5-shim.js",
  //"./lib/json2.js",
  //"./lib/DateUtil.jse",
  "./lib/StringUtil.jse",
  //"./lib/ClipboardGetter.jse",
  //"./lib/Template.jse",
  "./lib/Dialog.jse",
  "./app_openGrep/config/setting.js",
]

var CONS_LOCAL_LIBPATH = '';
var CONS_LOCAL_LIBS = [
  //"./config/setting.js",
]

// commonalized for js   /////////////////////////////////////////////
// load external libraries
var check_env = function(){
  // set env_name for targetting wsh, sakura, node
  var env_name = '';
  if (typeof(WScript) !== "undefined") env_name = 'wsh';
  if (typeof(Editor) !== "undefined") env_name = 'sakura';
  if (typeof(alert) !== "undefined") {env_name = 'browser';}
  else if (typeof(console) !== "undefined") env_name = 'node';
  return env_name;
}
var flag = check_env();
var CONFIG = {};

if(flag == "wsh"||flag == "sakura"){
  var objFS = new ActiveXObject("Scripting.FileSystemObject");
  var lib_path = CONS_COMMON_LIBPATH ? CONS_COMMON_LIBPATH: './';
  var llib_path = CONS_LOCAL_LIBPATH ? CONS_LOCAL_LIBPATH: './';
  // require common module
  with({
    libs : CONS_COMMON_LIBS, 
    llibs : CONS_LOCAL_LIBS,
    get_moduleCode : function(path){
      return objFS.OpenTextFile(path,1).ReadAll();
    }
  }) {
    var len = libs.length;
    for (var i = 0; i < len; i++){
      try {
        var module_path = objFS.BuildPath(lib_path,libs[i]);
        eval(get_moduleCode(module_path));
      } catch (e) {
        //console.log( e.description || e.message || "error" );
        null;
      }
    }
    var llen = llibs.length;
    for (var i = 0; i < llen; i++){
      try {
        var module_path = objFS.BuildPath(llib_path,llibs[i]);
        eval(get_moduleCode(module_path));
      } catch (e) {
        //console.log( e.description || e.message || "error" );
        null;
      }
    }
  };
  objFS = null;
}

var debug_mode = CONFIG.DEBUG_MODE;

// pretend console.log 
var console = console || {};
if(console){
  if(debug_mode){
    if(flag == "sakura"){
      console.log=function(str){
        var log_str = "[DEBUG] $d$t ($f) > " + str;
        Editor.TraceOut(log_str,1)
      }
      console.info=function(str){
        var log_str = "[INFO] $d$t ($f) > " + str;
        Editor.TraceOut(log_str,1)
      }
    };
    if(flag == "wsh"){
      console.info = function(str){WScript.Echo('[INFO] ' + str)};
      console.log = function(str){WScript.Echo('[DEBUG] ' + str)};
    }
  }else{
    if(flag == "wsh")  console.info = function(str){WScript.Echo(str)};
    if(flag == "sakura")  console.info =function(str){Editor.InfoMsg(str)};
    if(flag == "wsh")  console.log = function(str){null;};
    if(flag == "sakura")  console.log = function(str){null;};
  }
}
// pretend process.exit
if(typeof(process) === "undefined"){
  if(flag == "wsh")  process={exit : function(e){WScript.Quit(e)}};
  if(debug_mode){
    if(flag == "sakura")  process={exit : function(e){Editor.TraceOut('done')}};
  }else{
    if(flag == "sakura")  process={exit : function(e){'done'}};
  }
}

// local functions
// 
var get_target = function(expandParam){
  // $F : opened file's full path
  // $f : opened file's name
  // $e : opened file's folder path
  // $b : opened file's extention
  // $C : 選択中の場合、選択テキストの１行目のテキスト（改行コード除く）
  //      選択中でない場合、カーソル位置の単語
  // 引数無し : 選択されている場合、選択された文字列。選択されていない場合、Clipboardにある文字列
  // $Z : 独自expandPrameter : 全テキスト
  var ret ='';
  if(typeof(expandParam) === 'undefined'){
    if(Editor.IsTextSelected){
      ret = Editor.GetSelectedString(0);
    }else{
      ret = Editor.GetClipboard(0);
    }
  } else {
    if(expandParam === '$Z'){
      Editor.SelectAll();
      ret = Editor.GetSelectedString(0);
      Editor.IsTextSelectingLock(0);
      Editor.ExpandParameter(expandParam)
    } else {
      ret = Editor.ExpandParameter(expandParam)
    }
  }
  return ret;
}

var get_template = function(herestrings, sep){
  sep = sep || '\r\n';
  var template = herestrings.toString().split(sep).slice(2,-2).join(sep);
  return template;
}

var show_menu = function(){
  var menu_statement = function(){
/**
1. grep my folder(&g),-,
2. grep JOURNAL(&j),
3. grep Sakura Macro(&s),
4. grep Pwsh Script(&p),
*/
  }
  var menu_ = get_template(menu_statement)
  var ope = Editor.CreateMenu( 1, menu_);
  // console.log(menu_statement);
  // console.log(ope);
  return ope;
}

var operate_screen = function(str){
  if(Editor.isTextSelected){
    if(debug_mode){
      Editor.TraceOut(str);
    } else {
      null;
    }
  } else {
    null;
    //Editor.TraceOut(str);
  }
}

var get_targetDirectory = function(ope){
  var ret_dir = './';
  if(ope == 1){
    ret_dir = CONFIG.DIRS.MY_FOLDER;
  }
  if(ope == 2){
    ret_dir = CONFIG.DIRS.JOURNAL;
  }
  if(ope == 3){
    ret_dir = CONFIG.DIRS.SAKURA_MACRO;
  }
  if(ope == 4){
    ret_dir = CONFIG.DIRS.PWSH_SCRIPT;
  }
  return ret_dir;
}

var get_targetFile = function(ope){
  var ret = '*.*';
  if(ope == 1){
    ret = CONFIG.EXTS.MY_FOLDER;
  }
  if(ope == 2){
    ret = CONFIG.EXTS.JOURNAL;
  }
  if(ope == 3){
    ret = CONFIG.EXTS.SAKURA_MACRO;
  }
  if(ope == 4){
    ret = CONFIG.EXTS.PWSH_SCRIPT;
  }
  
  return ret;
}

var open_dialog = function(text){
  if(typeof(text) === 'undefined') text = '';
  var message_ = 'Please input keywords.'
  var windowTitle = 'Input';
  var defaultText = text;
  var DIALOG = exports.DIALOG;
  var ret = text;
  if(flag == "sakura"){
    ret = Editor.inputBox(message_, defaultText, 30);
  }
  if(flag == "wsh"){
    ret = DIALOG.show_inputBox(message_, windowTitle, defaultText);
  }
  return ret;
}

var display_grep = function(text, target_file, target_dir, flag_sub){
  if(typeof(flag_sub) === 'undefined') flag_sub = true;
  
  // grep option
  var grepopt_str = "0000-0100-0111-0001" ; // include sub folders
  if(!flag_sub){
    grepopt_str =   "0000-0100-0111-0000" ; // not include sub folders
  }
  var StringUtil = exports.StringUtil;
  var grepopt = StringUtil.deleteChars(grepopt_str,'\-');
  var gopt = parseInt(grepopt,2);
  //console.log(grepopt);
  console.log(gopt);
  console.log(text);
  console.log(target_file);
  console.log(target_dir);
  Editor.Grep(text, target_file, target_dir, gopt);
}

// do process 
function doProcess(){
  console.log('------------------------- start');
  console.log('APP : ' + CONFIG.APP_NAME);
  
  var StringUtil = exports.StringUtil;
  var target_ = get_target();
  var text = target_;
  var flag_sub = true; // if you want not to include sub folders, set false.
  
  // menu process
  var ope = show_menu();
  var target_file = get_targetFile(ope);
  var target_dir = get_targetDirectory(ope);
  if(ope == '0'||ope == '1'){flag_sub = false;}
  console.log('target_dir = ' + target_dir);
  console.log('flag_sub = ' + flag_sub);
  
  // input dialog
  text = text || 'FIXME';
  var search_str = open_dialog(text);
  // open grep screan
  display_grep(search_str, target_file, target_dir, flag_sub);
  
  if(ope !== 0){
    if(debug_mode){
      console.log('ope = ' + ope);
      console.log(target_);
    }else{
      operate_screen(text);
    }
  }
}

// ------------------------------------------------ entry point
// 
if(typeof(Editor) !== 'undefined'){
  process.exit(doProcess());
  
} else {
  if(typeof(WScript) !== 'undefined'){
    WScript.Echo('[Warn] Opps! Sorry. This app is for Sakura Ediotr.');
  } else {
    console.log('[Warn] Opps! Sorry. This app is for Sakura Ediotr.');
  }
}

}())
